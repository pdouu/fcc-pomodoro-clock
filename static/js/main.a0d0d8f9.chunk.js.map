{"version":3,"sources":["sound/startStop.mp3","sound/incrementDecrement.mp3","sound/timerAudio.mp3","PomodoroClock.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PomodoroClock","useState","timeLeftMinute","setTimeLeftMinute","timeLeftSecond","setTimeLeftSeconds","startToggle","setStartToggle","sessionSetting","setSessionSetting","breakSetting","setBreakSetting","sessionBreakToggle","setSBToggle","useEffect","timerInterval","setInterval","clearInterval","playSound","incrementDecrement","whichSetting","operation","sessionRef","breakRef","soundSrc","soundFile","document","getElementById","currentTime","play","className","htmlFor","id","src","timerAudio","onClick","beepSound","pause","resetAll","startStopAudio","incrementDecrementAudio","App","style","fontSize","rel","target","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0d0d8f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/startStop.2fcb8688.mp3\";","module.exports = __webpack_public_path__ + \"static/media/incrementDecrement.f332e318.mp3\";","module.exports = __webpack_public_path__ + \"static/media/timerAudio.ba877f66.mp3\";","import React, { useState, useEffect } from \"react\";\r\nimport \"./PomodoroClock.css\";\r\n\r\nimport startStopAudio from \"./sound/startStop.mp3\";\r\nimport incrementDecrementAudio from \"./sound/incrementDecrement.mp3\";\r\nimport timerAudio from \"./sound/timerAudio.mp3\";\r\n\r\nexport default function PomodoroClock() {\r\n  const [timeLeftMinute, setTimeLeftMinute] = useState(25);\r\n  const [timeLeftSecond, setTimeLeftSeconds] = useState(0);\r\n  const [startToggle, setStartToggle] = useState(false);\r\n\r\n  const [sessionSetting, setSessionSetting] = useState(25);\r\n  const [breakSetting, setBreakSetting] = useState(5);\r\n\r\n  const [sessionBreakToggle, setSBToggle] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let timerInterval = null;\r\n    if (startToggle) {\r\n      timerInterval = setInterval(() => {\r\n        if (timeLeftSecond === 0 && timeLeftMinute > 0) {\r\n          setTimeLeftMinute(timeLeftMinute - 1);\r\n          setTimeLeftSeconds(59);\r\n        } else if (timeLeftSecond > 0) {\r\n          setTimeLeftSeconds(timeLeftSecond - 1);\r\n        } else if (timeLeftMinute === 0 && timeLeftSecond === 0) {\r\n          if (!sessionBreakToggle) {\r\n            setTimeLeftMinute(breakSetting);\r\n            setSBToggle(true);\r\n          } else {\r\n            setSBToggle(false);\r\n            setTimeLeftMinute(sessionSetting);\r\n          }\r\n        }\r\n      }, 1000);\r\n    } else if (!startToggle && timeLeftSecond !== 0) {\r\n      clearInterval(timerInterval);\r\n    }\r\n    return () => clearInterval(timerInterval);\r\n  }, [\r\n    startToggle,\r\n    timeLeftSecond,\r\n    timeLeftMinute,\r\n    breakSetting,\r\n    sessionBreakToggle,\r\n    sessionSetting,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (timeLeftSecond === 0 && timeLeftMinute === 0) {\r\n      playSound(\"beep\");\r\n    }\r\n  });\r\n  const startStop = () => {\r\n    setStartToggle(!startToggle);\r\n\r\n    playSound(\"button-audio\");\r\n  };\r\n\r\n  const resetAll = () => {\r\n    setTimeLeftMinute(25);\r\n    setTimeLeftSeconds(0);\r\n    setSBToggle(false);\r\n    setStartToggle(false);\r\n    setSessionSetting(25);\r\n    setBreakSetting(5);\r\n    playSound(\"button-audio\");\r\n    let beepSound = document.getElementById(\"beep\");\r\n    beepSound.currentTime = 0;\r\n    beepSound.pause();\r\n  };\r\n\r\n  const incrementDecrement = (whichSetting, operation) => {\r\n    if (!startToggle) {\r\n      if (whichSetting === \"session\") {\r\n        let sessionRef = sessionSetting;\r\n        if (operation === \"increment\" && sessionSetting <= 59) {\r\n          setSessionSetting(sessionSetting + 1);\r\n          if (!sessionBreakToggle) {\r\n            setTimeLeftMinute(sessionRef + 1);\r\n            setTimeLeftSeconds(0);\r\n          }\r\n        } else if (operation === \"decrement\" && sessionSetting > 1) {\r\n          setSessionSetting(sessionSetting - 1);\r\n          if (!sessionBreakToggle) {\r\n            setTimeLeftMinute(sessionRef - 1);\r\n            setTimeLeftSeconds(0);\r\n          }\r\n        }\r\n      } else {\r\n        let breakRef = breakSetting;\r\n        if (operation === \"increment\" && breakSetting <= 59) {\r\n          setBreakSetting(breakSetting + 1);\r\n          if (sessionBreakToggle) {\r\n            setTimeLeftMinute(breakRef + 1);\r\n            setTimeLeftSeconds(0);\r\n          }\r\n        } else if (operation === \"decrement\" && breakSetting > 1) {\r\n          setBreakSetting(breakSetting - 1);\r\n          if (sessionBreakToggle) {\r\n            setTimeLeftMinute(breakRef - 1);\r\n            setTimeLeftSeconds(0);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    playSound(\"increment-decrement-audio\");\r\n  };\r\n  const playSound = (soundSrc) => {\r\n    const soundFile = document.getElementById(soundSrc);\r\n    soundFile.currentTime = 0;\r\n    soundFile.play();\r\n  };\r\n\r\n  return (\r\n    <div className=\"clock-container\">\r\n      <div className=\"clock-row\">\r\n        <div className=\"clock-timer-container\">\r\n          <label htmlFor=\"time-left\" id=\"timer-label\">\r\n            {sessionBreakToggle ? \"Break\" : \"Session\"}\r\n          </label>\r\n          <div id=\"time-left\">\r\n            <span className=\"time-left-minusecs\">\r\n              {timeLeftMinute < 10 ? \"0\" + timeLeftMinute : timeLeftMinute}\r\n            </span>\r\n            <span id=\"minusecs-between\">:</span>\r\n            <span className=\"time-left-minusecs\">\r\n              {timeLeftSecond < 10 ? \"0\" + timeLeftSecond : timeLeftSecond}\r\n            </span>\r\n          </div>\r\n          <audio id=\"beep\" src={timerAudio}></audio>\r\n        </div>\r\n      </div>\r\n      <div className=\"clock-row-start-stop\">\r\n        <i\r\n          id=\"start_stop\"\r\n          className={\r\n            !startToggle\r\n              ? \"clock-icon-start-stop fas fa-play-circle\"\r\n              : \"clock-icon-start-stop fas fa-pause-circle\"\r\n          }\r\n          onClick={() => startStop()}\r\n        ></i>\r\n        <i\r\n          id=\"reset\"\r\n          className=\"clock-icon-start-stop fas fa-undo\"\r\n          onClick={() => resetAll()}\r\n        ></i>\r\n        <audio id=\"button-audio\" src={startStopAudio}></audio>\r\n      </div>\r\n      <div className=\"clock-row-break-session\">\r\n        <div id=\"session-container\" className=\"break-session-settings\">\r\n          <label\r\n            htmlFor=\"session-length\"\r\n            id=\"session-label\"\r\n            className=\"break-session-label\"\r\n          >\r\n            Session Length\r\n          </label>\r\n          <div>\r\n            <i\r\n              id=\"session-increment\"\r\n              className=\"clock-icon-plus-minus fas fa-plus-square\"\r\n              onClick={() => incrementDecrement(\"session\", \"increment\")}\r\n            ></i>\r\n            <span id=\"session-length\">{sessionSetting}</span>\r\n            <i\r\n              id=\"session-decrement\"\r\n              className=\"clock-icon-plus-minus fas fa-minus-square\"\r\n              onClick={() => incrementDecrement(\"session\", \"decrement\")}\r\n            ></i>\r\n          </div>\r\n        </div>\r\n        <div id=\"break-container\" className=\"break-session-settings\">\r\n          <label\r\n            htmlFor=\"break-length\"\r\n            id=\"break-label\"\r\n            className=\"break-session-label\"\r\n          >\r\n            Break Length\r\n          </label>\r\n          <div>\r\n            <i\r\n              id=\"break-increment\"\r\n              className=\"clock-icon-plus-minus fas fa-plus-square\"\r\n              onClick={() => incrementDecrement(\"break\", \"increment\")}\r\n            ></i>\r\n            <span id=\"break-length\">{breakSetting}</span>\r\n            <i\r\n              id=\"break-decrement\"\r\n              className=\"clock-icon-plus-minus fas fa-minus-square\"\r\n              onClick={() => incrementDecrement(\"break\", \"decrement\")}\r\n            ></i>\r\n            <audio\r\n              id=\"increment-decrement-audio\"\r\n              src={incrementDecrementAudio}\r\n            ></audio>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PomodoroClock from \"./PomodoroClock.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div id=\"pomodoro-h1\">Pomodoro Clock</div>\n      <PomodoroClock />\n      <p style={{ fontSize: \"20px\" }}>\n        <a\n          className=\"github-link\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          href=\"https://github.com/yusufcmlt/fcc-pomodoro-clock\"\n        >\n          {\"  \"}\n        </a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}